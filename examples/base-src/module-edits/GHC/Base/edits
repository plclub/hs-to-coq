# We have notation in the midamble, and we have to tell hs-to-coq
# to include the ManualNotations module in the Notations module
manual notation GHC.Base

skip module GHC.Types

# replaced with Coq types
skip GHC.Base.String
skip option
skip Coq.Init.Datatypes.app

skip GHC.Base.Opaque   # can't handle existential
skip GHC.Base.build    # higher-rank type
skip GHC.Base.augment  # higher-rank type

# partial
skip GHC.Base.until

# can't handle overloaded ifthenelse
skip GHC.Base.ifThenElse

# no IO
skip GHC.Base.unIO
skip GHC.Base.thenIO
skip GHC.Base.returnIO
skip GHC.Base.bindIO
skip GHC.Base.failIO
skip GHC.Base.Functor__IO
skip GHC.Base.Applicative__IO
skip GHC.Base.Alternative__IO
skip GHC.Base.Monad__IO
skip GHC.Base.MonadPlus__IO
skip GHC.Base.Semigroup__IO
skip GHC.Base.Monoid__IO

skip GHC.Base.Semigroup__op_zt__
skip GHC.Base.Semigroup__op_zt____op_zt__
skip GHC.Base.Semigroup__op_zt____op_zt____op_zt____23
skip GHC.Base.Semigroup__op_zt____op_zt____op_zt____op_zt____87
skip GHC.Base.Monoid__op_zt__
skip GHC.Base.Monoid__op_zt____op_zt__
skip GHC.Base.Monoid__op_zt____op_zt____op_zt____23
skip GHC.Base.Monoid__op_zt____op_zt____op_zt____op_zt____87

# (<) on NonEmpty calls Ord__NonEmpty_compare on the list component
skip GHC.Base.Ord__NonEmpty

# Applicative on NonEmpty defined in terms of ap and liftM2, 
# which needs Monad NonEmpty
redefine Local Definition GHC.Base.Applicative__NonEmpty_op_zlztzg__ {a} {b} : 
  (GHC.Base.NonEmpty (a -> b)) -> ((GHC.Base.NonEmpty a) -> (GHC.Base.NonEmpty b)) :=
  fun m1 m2 => GHC.Base.Monad__NonEmpty_op_zgzgze__ m1 
    (fun x1 => GHC.Base.Monad__NonEmpty_op_zgzgze__ m2 
    (fun x2 => GHC.Base.Applicative__NonEmpty_pure (x1 x2))).
redefine Local Definition GHC.Base.Applicative__NonEmpty_liftA2 {a} {b} {c} :
     (a -> (b -> c)) -> 
	  ((GHC.Base.NonEmpty a) -> ((GHC.Base.NonEmpty b) -> (GHC.Base.NonEmpty c))) :=
  fun f m1 m2 => GHC.Base.Monad__NonEmpty_op_zgzgze__ m1
      (fun x1 => GHC.Base.Monad__NonEmpty_op_zgzgze__ m2 
      (fun x2 => GHC.Base.Applicative__NonEmpty_pure (f x1 x2))).

# no unboxed types, redefined in midamble
skip GHC.Base.unsafeChr
skip GHC.Base.ord

skip GHC.Base.shiftRL#
skip GHC.Base.shiftL#
skip GHC.Base.iShiftL#
skip GHC.Base.iShiftRA#
skip GHC.Base.iShiftRL#
skip GHC.Base.divModInt#

skip GHC.Base.remInt
skip GHC.Base.quotRemInt
skip GHC.Base.divModInt
skip GHC.Base.divInt
skip GHC.Base.minInt
skip GHC.Base.maxInt
skip GHC.Base.modInt
skip GHC.Base.quotInt
skip GHC.Base.getTag

skip GHC.Base.primIntToChar
skip GHC.Base.primCharToInt
skip GHC.Base.primUnicodeMaxChar

## Type class instance ordering

order GHC.Base.Eq___option GHC.Base.Ord__option

order GHC.Base.Functor__arrow GHC.Base.Applicative__arrow_op_ztzg__ GHC.Base.Applicative__arrow GHC.Base.Monad__arrow_return_ GHC.Base.Monad__arrow GHC.Base.Alternative__arrow GHC.Base.MonadPlus__arrow

order GHC.Base.Functor__list GHC.Base.Applicative__list GHC.Base.Monad__list_return_ GHC.Base.Monad__list_op_zgzg__ GHC.Base.Monad__list GHC.Base.Alternative__list

order GHC.Base.Functor__option GHC.Base.Applicative__option_op_zlztzg__ GHC.Base.Applicative__option GHC.Base.Monad__option_op_zgzg__ GHC.Base.Monad__option_return_ GHC.Base.Monad__option GHC.Base.Alternative__option GHC.Base.MonadPlus__option

order GHC.Base.Functor__pair_type GHC.Base.Applicative__pair_type GHC.Base.Monad__pair_type_return_ GHC.Base.Monad__pair_type_op_zgzgze__ GHC.Base.Monad__pair_type_op_zgzg__

order GHC.Base.Functor__pair_type GHC.Base.Applicative__pair_type_op_ztzg__

order GHC.Base.Functor__NonEmpty GHC.Base.Applicative__NonEmpty_op_ztzg__ GHC.Base.Applicative__NonEmpty GHC.Base.Monad__NonEmpty_return_ GHC.Base.Monad__NonEmpty_op_zgzg__ GHC.Base.Monad__NonEmpty
order GHC.Base.Monad__list GHC.Base.Monad__NonEmpty_op_zgzgze__

order GHC.Base.Semigroup__list       GHC.Base.Monoid__list_mappend
order GHC.Base.Semigroup__arrow      GHC.Base.Monoid__arrow_mappend
order GHC.Base.Semigroup__unit       GHC.Base.Monoid__unit_mappend
order GHC.Base.Semigroup__comparison GHC.Base.Monoid__comparison_mappend
order GHC.Base.Semigroup__option     GHC.Base.Monoid__option_mappend

order GHC.Base.Functor__list GHC.Base.Functor__NonEmpty_fmap
order GHC.Base.Functor__list GHC.Base.Functor__NonEmpty_op_zlzd__

# Needs some and many
skip GHC.Base.Alternative__list
skip GHC.Base.MonadPlus__list
skip GHC.Base.Alternative__option
skip GHC.Base.MonadPlus__option

# For hs_coq_map theorem
redefine Definition GHC.Base.map {A B :Type} (f : A -> B) xs := Coq.Lists.List.map f xs.

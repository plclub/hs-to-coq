# we define these types in the preamble because we need an edit to supply
# the kinds of their arguments. Coq can't figure it out.

data kinds Control.Applicative.WrappedMonad (Type -> Type)
data kinds Control.Applicative.WrappedArrow (Type -> (Type -> Type))

add Control.Applicative Instance Unpeel_WrappedMonad {m} {a} : HsToCoq.Unpeel.Unpeel (Control.Applicative.WrappedMonad m a) (m a) :=
  HsToCoq.Unpeel.Build_Unpeel _ _ Control.Applicative.unwrapMonad Control.Applicative.WrapMonad.
add Control.Applicative Instance Unpeel_WrappedArrow {a}{b}{c} : HsToCoq.Unpeel.Unpeel (Control.Applicative.WrappedArrow a b c) (a b c) :=
  HsToCoq.Unpeel.Build_Unpeel _ _ Control.Applicative.unwrapArrow Control.Applicative.WrapArrow.

# Needs Alternative
skip Control.Applicative.optional

skip Control.Applicative.ZipList
skip Control.Applicative.Applicative__ZipList
skip Control.Applicative.Foldable__ZipList
skip Control.Applicative.Functor__ZipList
skip Control.Applicative.Eq___ZipList
skip Control.Applicative.Ord__ZipList

# will also need to skip Ord/Eq_/Functor/Foldable when those type applications are supported

# Order
order Unpeel_WrappedMonad Control.Applicative.Monad__WrappedMonad_op_zgzg__
order Unpeel_WrappedMonad Control.Applicative.Monad__WrappedMonad_op_zgzgze__
order Unpeel_WrappedMonad Control.Applicative.Monad__WrappedMonad_op_return_

order Control.Applicative.Functor__WrappedMonad Control.Applicative.Applicative__WrappedMonad_op_ztzg__ Control.Applicative.Applicative__WrappedMonad Control.Applicative.Monad__WrappedMonad
order Control.Applicative.Functor__WrappedArrow Control.Applicative.Applicative__WrappedArrow_op_ztzg__

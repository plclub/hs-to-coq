# needs MonadPlus option
skip Maybes.firstJusts
skip Maybes.firstJust

# Needs Control.Exception.Base
skip Maybes.tryMaybeT

#
# add Default constraint to partial function
#
set type Maybes.expectJust : forall {a} `{HsToCoq.Err.Default a}, GHC.Base.String -> ((option a) -> a)

#
# fmap and <*> defined in terms of liftM and ap
#
redefine Local Definition Maybes.Functor__MaybeErr_fmap {inst_err} :
  forall {a} {b},
    (a -> b) -> (((MaybeErr inst_err) a) -> ((MaybeErr inst_err) b)) :=
  fun {a} {b} => fun f x => match x with | Succeeded x => Succeeded (f x) | Failed e => Failed e end.

redefine Local Definition Maybes.Applicative__MaybeErr_op_zlztzg__ {inst_err} :
			forall {a} {b}, ((MaybeErr inst_err) (a -> b)) ->
                    (((MaybeErr inst_err) a) -> ((MaybeErr inst_err) b)) :=
  fun {a} {b} =>  fun mf mx => match mf with
                       | Succeeded f => match mx with
							  | Succeeded x => Succeeded (f x) | Failed e => Failed e end
                       | Failed e => Failed e end.

order Maybes.Eq___MaybeErr         Maybes.Ord__MaybeErr
order Maybes.Functor__MaybeErr     Maybes.Applicative__MaybeErr_op_zlztzg__
order Maybes.Applicative__MaybeErr Maybes.Monad__MaybeErr_return_

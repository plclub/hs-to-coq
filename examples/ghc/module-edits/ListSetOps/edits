## needs notation (List.!!) and partial
skip ListSetOps.getNth

## nontrivial termination argument
skip ListSetOps.findDupsEq 

## needs Data.List.NonEmpty.groupBy
axiomatize definition ListSetOps.equivClasses

#
# Added Default constraint
#
set type ListSetOps.assocUsing : forall {a} {b} `{HsToCoq.Err.Default b}, (a -> (a -> bool)) -> (GHC.Base.String -> (Assoc a b -> (a -> b)))
set type ListSetOps.assoc : forall {a} {b} `{GHC.Base.Eq_ a}`{HsToCoq.Err.Default b} , (GHC.Base.String -> (ListSetOps.Assoc a b -> (a -> b)))
set type ListSetOps.unionLists : forall {a} `{GHC.Base.Eq_ a}, list a -> (list a -> list a)

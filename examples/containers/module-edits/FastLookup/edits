rename type GHC.Types.Int = Coq.Numbers.BinNums.N

# `complement x` does not work at type `N`, as the complement of a natural
# number is negative. But in this module, all uses of `complement` are meant to be
# 64bit numbers anyways, so we can complement just these bits.
rewrite forall x, (Data.Bits.complement x) = (complement' x)

rewrite forall x, (x Data.Bits..&. Data.IntSet.Internal.prefixBitMask) = Coq.NArith.BinNat.N.ldiff x Data.IntSet.Internal.suffixBitMask

# Share bit stuff with IntSet
rename value Data.IntMap.Internal.mask = Data.IntSet.Internal.mask
skip Data.IntSet.Internal.mask
rename value Data.IntMap.Internal.zero = Data.IntSet.Internal.zero
skip Data.IntSet.Internal.zero


# Local issue on Joachimâ€™s PC?
rename type  GHC.Maybe.Maybe   = option
rename value GHC.Maybe.Just    = Some
rename value GHC.Maybe.Nothing = None
